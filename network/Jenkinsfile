pipeline {
    agent any
    
    parameters {
        choice(
            name: 'SERVICE',
            choices: ['all', 'caddy', 'pihole', 'uptime-kuma'],
            description: 'Service to deploy'
        )
        choice(
            name: 'ACTION',
            choices: ['deploy', 'update', 'restart', 'status'],
            description: 'Action to perform'
        )
    }
    
    environment {
        SERVER_HOST = credentials('SERVER_HOST')
        SERVER_USER = credentials('SERVER_USER')
        SERVER_PATH = credentials('SERVER_PATH')
        SSH_KEY = credentials('SSH_PRIVATE_KEY')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Setup SSH') {
            steps {
                script {
                    // Setup SSH key
                    sh '''
                        mkdir -p ~/.ssh
                        echo "$SSH_KEY" > ~/.ssh/id_rsa
                        chmod 600 ~/.ssh/id_rsa
                        ssh-keyscan -H $SERVER_HOST >> ~/.ssh/known_hosts
                    '''
                }
            }
        }
        
        stage('Deploy Service') {
            steps {
                script {
                    sh '''
                        cd network/scripts
                        chmod +x *.sh
                        
                        if [ "$SERVICE" = "all" ]; then
                            ./manage-all.sh $ACTION
                        else
                            ./manage-$SERVICE.sh $ACTION
                        fi
                    '''
                }
            }
        }
        
        stage('Verify Deployment') {
            when {
                anyOf {
                    equals expected: 'deploy', actual: params.ACTION
                    equals expected: 'update', actual: params.ACTION
                }
            }
            steps {
                script {
                    sh '''
                        cd network/scripts
                        
                        if [ "$SERVICE" = "all" ]; then
                            ./manage-all.sh status
                        else
                            ./manage-$SERVICE.sh status
                        fi
                    '''
                }
            }
        }
    }
    
    post {
        always {
            script {
                // Cleanup SSH key
                sh '''
                    rm -f ~/.ssh/id_rsa
                '''
            }
        }
        success {
            echo "Deployment completed successfully!"
        }
        failure {
            echo "Deployment failed!"
        }
    }
} 